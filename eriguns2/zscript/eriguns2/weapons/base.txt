/*
 * eriguns2: base weapon defs
 * (c) xaser 2017
 */

class HellWeapon : DoomWeapon
{
	States
	{
	DeadLowered:
		TNT1 A -1;
		Stop;
	}

	// handy shortcut for firing a spray of projectiles with the same arguments.
	// only uses a single "unit" of ammo (whatever AmmoUse is defined as).
	action void X_FireProjectileSpread(class<Actor> missiletype, int amount = 1, Vector2 spreadAngle = (0, 0), bool useammo = true, double spawnofs_xy = 0, double spawnheight = 0, int flags = 0, Vector2 spreadPitch = (0, 0))
	{
		for(int i = 1; i <= amount; i++) {
			A_FireProjectile(missiletype, frandom(spreadAngle.x, spreadAngle.y), (i == amount) ? useammo : false, spawnofs_xy, spawnheight, flags, frandom(spreadPitch.x, spreadPitch.y));
		}
	}
}

class Nothing : Actor
{
	States
	{
	Spawn:
		TNT1 A 0;
		Stop;
	}
}

// lightweight RandomSpawner alternative; spawns an actor unconditionally.
// provided as a more convenient alternative to WeaponGivers so one doesn't
// have to duplicate the pickup sprite/message/sound.
class ActorSpawner : Actor
{
	Class<Actor> spawnClass;

	Property SpawnClass:spawnClass;

	override void PostBeginPlay()
	{
		X_SpawnReplacement(spawnClass);
	}

	void X_SpawnReplacement(class<Actor> spawnClass)
	{
		// Spawn an actor and copy map-modifiable actor properties. This code
		// is taken from RandomSpawner, so it covers most bases.
		let newmobj = Spawn(spawnClass, pos);
		if(newmobj) {
			newmobj.SpawnAngle = SpawnAngle;
			newmobj.Angle      = Angle;
			newmobj.Pitch      = Pitch;
			newmobj.Roll       = Roll;
			newmobj.Vel	       = Vel;
			newmobj.SpawnPoint = SpawnPoint;
			newmobj.special    = special;
			newmobj.args[0]    = args[0];
			newmobj.args[1]    = args[1];
			newmobj.args[2]    = args[2];
			newmobj.args[3]    = args[3];
			newmobj.args[4]    = args[4];
			newmobj.special1   = special1;
			newmobj.special2   = special2;
			newmobj.SpawnFlags = SpawnFlags & ~MTF_SECRET;
			newmobj.HandleSpawnFlags();
			newmobj.SpawnFlags = SpawnFlags;
			newmobj.ChangeTid(tid);
			newmobj.master = master;	// For things such as DamageMaster/DamageChildren, transfer mastery.
			newmobj.target = target;
			newmobj.tracer = tracer;
			newmobj.CopyFriendliness(self, false);

			// This handles things such as projectiles with the MF4_SPECTRAL flag that have
			// a health set to -2 after spawning, for internal reasons.
			if (health != SpawnHealth()) newmobj.health = health;
			if (!bDropped) newmobj.bDropped = false;

			// Handle special altitude flags
			if (newmobj.bSpawnCeiling) {
				newmobj.SetZ(newmobj.ceilingz - newmobj.Height - SpawnPoint.Z);
			}
			else if (newmobj.bSpawnFloat) {
				double space = newmobj.ceilingz - newmobj.Height - newmobj.floorz;
				if (space > 48) {
					space -= 40;
					newmobj.SetZ((space * random[randomspawn]()) / 256. + newmobj.floorz + 40);
				}
				newmobj.AddZ(SpawnPoint.Z);
			}

			// [XA] I've elected not to bother with reimplementing missile/boss
			//      handling since these aren't used anywhere in the mod.
			//      Take a look at RandomSpawner if you want to yoink this for
			//      something uber-robust (or, better yet, inherit from it if
			//      you can get away with the restrictions imposed by DropItem).
		}
		self.Destroy();
	}
}

// coolio cvar-based spawner. Spawns Actor A if cvar is 0, Actor B if it's 1,
// or randomly chooses between the two if it's 2.
class CvarToggleSpawner : ActorSpawner
{
	String toggleCvar;
	Class<Actor> onClass;
	Class<Actor> offClass;

	Property Cvar:toggleCvar;
	Property OnClass:onClass;
	Property OffClass:offClass;

	override void PostBeginPlay()
	{
		let cv = CVar.GetCvar(toggleCvar);
		if(cv) {
			int cvalue = cv.GetInt();
			if(cvalue == 2) {
				cvalue = random(0, 1);
			}
			class<Actor> actorClass = cvalue ? onClass : offClass;
			X_SpawnReplacement(actorClass);
		}
	}
}
