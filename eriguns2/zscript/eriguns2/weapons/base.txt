// --------------------------------------------------------------------------
//
// Base Weapon Defs
//
// --------------------------------------------------------------------------

class HellWeapon : DoomWeapon
{
	States
	{
	DeadLowered:
		TNT1 A -1;
		Stop;
	}

	// handy shortcut for firing a spray of projectiles with the same arguments.
	// only uses a single "unit" of ammo (whatever AmmoUse is defined as).
	action void X_FireProjectileSpread(class<Actor> missiletype, int amount = 1, Vector2 spreadAngle = (0, 0), bool useammo = true, double spawnofs_xy = 0, double spawnheight = 0, int flags = 0, Vector2 spreadPitch = (0, 0))
	{
		for(int i = 1; i <= amount; i++) {
			A_FireProjectile(missiletype, frandom(spreadAngle.x, spreadAngle.y), (i == amount) ? useammo : false, spawnofs_xy, spawnheight, flags, frandom(spreadPitch.x, spreadPitch.y));
		}
	}
}

class Nothing : Actor
{
	States
	{
	Spawn:
		TNT1 A 0;
		Stop;
	}
}

// lightweight RandomSpawner alternative; spawns an actor unconditionally.
// provided as a more convenient alternative to WeaponGivers so one doesn't
// have to duplicate the pickup sprite/message/sound.
class ActorSpawner : Nothing
{
	Class<Actor> spawnClass;

	Property SpawnClass:spawnClass;

	override void PostBeginPlay()
	{
		let actor = Spawn(spawnClass, pos);
		if(actor) {
			actor.bDropped = bDropped;
		}
	}
}

// coolio cvar-based spawner. Spawns Actor A if cvar is 0, Actor B if it's 1,
// or randomly chooses between the two if it's 2.
class CvarToggleSpawner : Nothing
{
	String toggleCvar;
	Class<Actor> onClass;
	Class<Actor> offClass;

	Property Cvar:toggleCvar;
	Property OnClass:onClass;
	Property OffClass:offClass;

	override void PostBeginPlay()
	{
		let cv = CVar.GetCvar(toggleCvar);
		if(cv) {
			int cvalue = cv.GetInt();
			if(cvalue == 2) {
				cvalue = random(0, 1);
			}
			class<Actor> actorClass = cvalue ? onClass : offClass;
			let actor = Spawn(actorClass, pos);
			if(actor) {
				actor.bDropped = bDropped;
			}
		}
	}
}
