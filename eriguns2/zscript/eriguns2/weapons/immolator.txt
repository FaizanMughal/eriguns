/*
 * eriguns2: immolator
 * (c) xaser 2017
 * sprites (c) Amuscaria
 */

class EriImmolator : HellWeapon replaces Pistol
{
	Default
	{
		Scale 0.8;
		Weapon.SelectionOrder 1900;
		Weapon.AmmoUse 2;
		Weapon.AmmoGive 0;
		Weapon.AmmoType "FlameAmmo";
		Weapon.SisterWeapon "EriImmolatorPowered";
		Inventory.Pickupmessage "$GOTIMMOLATOR";
		Tag "$TAG_IMMOLATOR";
		+WEAPON.WIMPY_WEAPON;
	}
	States
	{
	Ready:
		HIMG AABBCCDDCCBB 1 A_WeaponReady();
		Loop;
	Deselect:
		HIMG A 0 A_StopSound(CHAN_WEAPON);
	DeselectLoop:
		HIMG AABBCCDDCCBB 1 A_Lower();
		Loop;
	Select:
		HIMG AABBCCDDCCBB 1 A_Raise();
		Wait;
	Fire:
		HIMF A 2 Bright A_GunFlash();
		HIMF B 2 Bright X_FireImmolator();
		HIMF CDEFGH 2 Bright;
		HIMF IJ 2 Bright A_ReFire();
		Goto Ready;
	Flash:
		TNT1 A 2 Bright A_Light(1);
		TNT1 A 2 Bright A_Light(2);
		TNT1 A 2 Bright A_Light(1);
		Goto LightDone;
 	Spawn:
		HEIM A -1;
		Stop;
	}
	
	action void X_FireImmolator()
	{
		A_FireProjectile("ImmolatorFireball");
		A_PlaySound("weapons/immolatorfire", CHAN_WEAPON);
	}
}

class EriImmolatorPowered : EriImmolator
{
	Default
	{
		Weapon.SisterWeapon "EriImmolator";
		+WEAPON.POWERED_UP;
	}
	States
	{
	Fire:
		HIMF A 2 Bright X_ImmolatorPowStart();
		HIMF A 0 Bright X_ImmolatorPowLoop();
	Hold:
		HIMF B 2 Bright X_FireImmolatorPow();
		HIMF CD 2 Bright;
		HIMF E 0 Bright A_Refire();
		HIMF E 2 Bright X_ImmolatorPowStop();
		HIMF FGHIJ 2 Bright;
		Goto Ready;
	}

	action void X_ImmolatorPowStart()
	{
		A_PlaySound("weapons/immolatorpow1", CHAN_BODY);
	}

	action void X_ImmolatorPowLoop()
	{
		A_PlaySound("weapons/immolatorpow2", CHAN_WEAPON, 1.0, 1);
	}

	action void X_FireImmolatorPow()
	{
		A_GunFlash();
		A_FireProjectile("ImmolatorFirestream", 0, 1, 0, -5);
	}

	action void X_ImmolatorPowStop()
	{
		A_PlaySound("weapons/immolatorpow3", CHAN_BODY);
		A_StopSound(CHAN_WEAPON);
	}
}

class EriImmolatorAsh : EriImmolator replaces GoldWand
{
	Default
	{
		Weapon.AmmoUse 1;
		Weapon.AmmoType "AshAmmo";
		Weapon.SisterWeapon "EriImmolatorAshPowered";
	}
}

class EriImmolatorAshPowered : EriImmolatorPowered
{
	Default
	{
		Weapon.AmmoUse 1;
		Weapon.AmmoType "AshAmmo";
		Weapon.SisterWeapon "EriImmolatorAsh";
		+WEAPON.POWERED_UP;
	}
}

class EriImmolatorMana : EriImmolator replaces FWeapAxe
{
	Default
	{
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 25;
		Weapon.AmmoType "Mana1";
		Weapon.SisterWeapon "EriImmolatorManaPowered";
	}
}

class EriImmolatorManaPowered : EriImmolatorPowered
{
	Default
	{
		Weapon.AmmoUse 1;
		Weapon.AmmoType "Mana1";
		Weapon.SisterWeapon "EriImmolatorMana";
		+WEAPON.POWERED_UP;
	}
}

class EriImmolatorAshGiver : WeaponGiver
{
	Default
	{
		Inventory.PickupMessage "$GOTIMMOLATOR";
		DropItem "EriImmolatorAsh";
	}
	States
	{
	Spawn:
		HEIM A -1;
		Stop;
	}
}

class EriImmolatorAshStrife  : EriImmolatorAshGiver replaces StrifeCrossbow {}

class ImmolatorFireball : EriStickyMissile
{
	int cycleTics;

	Default
	{
		Height 13;
		Radius 8;
		Speed 20;
		DamageFunction (5 * random(1,3));
		Alpha 0.85;
		Renderstyle "Add";
		Decal "PlasmaScorchLower";
		Obituary "$OB_MPIMMOLATOR";
		DamageType "FireBurn";
		DeathSound "weapons/immolatorout";
		Health 2;
		EriStickyMissile.MinZ 16;
		+FORCERADIUSDMG;
	}
    States
    {
    Spawn:
        HFBL A 1 Bright X_FlameTrail();
        Loop;
    Death:
		HPUF ABCDEFG 3 Bright;
        Stop;
	XDeath:
		HFLM A 0 Bright X_FlameStick();
		HFLM A 3 Bright X_FlameBurn(sound: true);
		HFLM B 3 Bright X_FlameBurn(scale: 0.5);
	Burning:
		HFLM CCCDDDEEEFFFGGGHHHIII 1 Bright X_FlameBurn(damage: 2, cycle: 3);
		HFLM I 0 Bright X_FlameCountdown();
		Loop;
	Burnout:
		HFLM J 3 Bright X_FlameBurnout();
		HFLM KLM 3 Bright;
		Stop;
    }
	
	void X_FlameTrail(class<Actor> spawnClass = "ImmolatorTrail")
	{
		A_SpawnItemEx(spawnClass, 0, 0, 0, 0, frandom(-0.05,0.25), frandom(-0.25,0.25), 0, SXF_CLIENTSIDE, 0);
	}

	void X_FlameStick()
	{
		A_PlaySound("weapons/immolatorhit", CHAN_VOICE);
		A_Stop();
		self.bPainless = true;
	}

	void X_FlameBurn(int damage = 0, int cycle = 1, float scale = 0, bool sound = false)
	{
		X_StickyWarp();
		if(sound) {
			A_PlaySound("weapons/immolatorburn", CHAN_WEAPON, 0.75, 1);
		}
		if(scale > 0) {
			A_SetScale(scale);
		}
		if(damage > 0 && (self.cycleTics % cycle == 0)) {
			// only deal damage every 'cycle' tics.
			A_Explode(damage, 32, XF_HURTSOURCE, 0, 16);
		}
		if(cycle > 1) {
			// don't start the cycle until we want to actually use it.
			self.cycleTics++;
		}
	}

	state X_FlameCountdown()
	{
		if(health <= 0) {
			return ResolveState("Burnout");
		}
		health--;
		return null;
	}

	void X_FlameBurnout()
	{
		A_PlaySound("weapons/immolatorout", CHAN_WEAPON);
	}
}

class ImmolatorFirestream : ImmolatorFireball
{
	Default
	{
		Obituary "$OB_MPIMMOLATORPOW";
		Scale 0.5;
	}
	States
	{
	Spawn:
		HFLM AAABBBCCCIIIJJJKKKLLLMMM 1 Bright X_FlameTrail("ImmolatorTrail2");
		Stop;
    Death:
		HFLM KLM 3 Bright;
        Stop;
	}
}

class ImmolatorTrail : EriTrail
{ 
	Default
	{
		Renderstyle "Add";
		Alpha 0.85;
		Scale 0.75;
	}
	States
	{
	Spawn:
		HFBL ABC 2 Bright;
		Stop;
	}
}

class ImmolatorTrail2 : ImmolatorTrail
{
	Default
	{
		Alpha 0.5;
		Scale 0.5;
	}
	States
	{
	Spawn:
		HFLM KLM 2 Bright;
		Stop;
	}
}
