/*
 * eriguns2: vorpal blade
 * (c) xaser 2017
 * sprites (c) Amuscaria
 */

class EriBlade : HellWeapon replaces Chainsaw
{
	Default
	{
		Scale 0.8;
		Weapon.SelectionOrder 2200;
		Weapon.AmmoType "None";
		Weapon.AmmoType2 "BladeCharge";
		Weapon.AmmoUse2 100;
		Weapon.SisterWeapon "EriBladePowered";
		Inventory.PickupMessage "$GOTBLADE";
		Obituary "$OB_MPBLADE";
		Tag "$TAG_BLADE";
		+WEAPON.NOALERT;
		+WEAPON.ALT_AMMO_OPTIONAL;
	}
	States
	{
	Ready:
		HVBG A 1 X_BladeReady();
		Loop;
	Deselect:
		HVBG A 1 X_BladeLower();
		Loop;
	Select:
		HVBG A 1 X_BladeRaise();
		Loop;
	Fire:
		#### A 1 A_WeaponOffset(16, 48);
		#### A 1 A_WeaponOffset(32, 64);
		#### A 1 A_WeaponOffset(48, 80);
		#### A 0 A_WeaponOffset( 0, 32);
	Hold:
		HVBG B 3 X_JumpIfCharged("ChargedHold");
		HVBG C 2 A_PlaySound("weapons/bladeswing", CHAN_WEAPON);
		HVBG D 2;
		HVBG E 2 A_CustomPunch(10, 0, 0, "BladePuff", 96);
		HVBG F 2;
		TNT1 A 7;
		Goto RaiseUp;
	AltFire:
	AltHold:
		HVBP A 0 A_JumpIfNoAmmo("Nope");
		HVBP A 1 A_WeaponOffset(16, 48);
		HVBP A 1 A_WeaponOffset(32, 64);
		HVBP A 1 A_WeaponOffset(48, 80);
		HVBP A 0 A_WeaponReady(WRF_NOFIRE);
	SuperSlash:
		HVBG B 3;
		HVBP E 2 A_PlaySound("weapons/bladepower2", CHAN_AUTO);
		HVBP E 2 A_PlaySound("weapons/bladeswing", CHAN_WEAPON);
		HVBP F 2;
		HVBP G 2 A_FireProjectile("BladeSlash", 0, 1);
		HVBP HI 2;
		TNT1 A 20;
		TNT1 A 0 ResolveState("RaiseNope");
		Goto RaiseNope;
	RaiseUp:
		HVBG A 0 A_Refire;
		HVBG A 0 X_JumpIfCharged("ChargedRaiseUp");
	RaiseNope:
		HVBG A 1 A_WeaponOffset(10, 72);
		HVBG A 1 A_WeaponOffset( 8, 64);
		HVBG A 1 A_WeaponOffset( 6, 56);
		HVBG A 1 A_WeaponOffset( 4, 48);
		HVBG A 1 A_WeaponOffset( 2, 40);
		Goto Ready;
	Nope:
		HVBG A 1 A_WeaponReady(WRF_NOFIRE);
		Goto Ready;
	Flash:
		TNT1 A 3 Bright A_Light(1);
		TNT1 A 3 Bright A_Light(3);
		TNT1 A 3 Bright A_Light(2);
		TNT1 A 3 Bright A_Light(1);
		Goto LightDone;

	ChargedReady:
		HVBP AAABBBCCCDDDCCC 1 A_WeaponReady();
		Loop;
	ChargedDeselect:
		HVBP AAABBBCCCDDDCCC 1 A_Lower();
		Loop;
	ChargedSelect:
		HVBP AAABBBCCCDDDCCC 1 A_Raise();
		Loop;
	ChargedHold:
		HVBG B 3;
		HVBP E 2 A_PlaySound("weapons/bladeswing", CHAN_WEAPON);
		HVBP F 2;
		HVBP G 2 A_CustomPunch(15, 0, 0, "BladePuffRed", 96);
		HVBP HI 2;
		TNT1 A 5;
		Goto RaiseUp;
	ChargedRaiseUp:
		HVBP D 1 A_WeaponOffset(10, 72);
		HVBP D 1 A_WeaponOffset( 8, 64);
		HVBP C 1 A_WeaponOffset( 6, 56);
		HVBP C 1 A_WeaponOffset( 4, 48);
		HVBP C 1 A_WeaponOffset( 2, 40);
		Goto Ready;
	Spawn:
		HEVB A -1;
		Stop;
	}
	
	bool X_BladeCharged()
	{
		return self.ammo2 && self.ammo2.amount >= 100;
	}

	action state X_BladeReady()
	{
		if(invoker.X_BladeCharged()) {
			return ResolveState("ChargedReady");
		}
		A_WeaponReady();
		return null;
	}

	action state X_BladeRaise()
	{
		if(invoker.X_BladeCharged()) {
			return ResolveState("ChargedSelect");
		}
		A_Raise();
		return null;
	}

	action state X_BladeLower()
	{
		if(invoker.X_BladeCharged()) {
			return ResolveState("ChargedDeselect");
		}
		A_Lower();
		return null;
	}

	action state X_JumpIfCharged(StateLabel state)
	{
		if(invoker.X_BladeCharged()) {
			return ResolveState(state);
		}
		return null;
	}
}

class EriBladePowered : EriBlade
{
	Default
	{
		Weapon.SisterWeapon "EriBlade";
		Weapon.AmmoUse2 0;
		Obituary "$OB_MPBLADEPOW";
		+WEAPON.POWERED_UP;
	}
	States
	{
	Ready:
		Goto ChargedReady;
	Deselect:
		Goto ChargedDeselect;
	Select:
		Goto ChargedSelect;
	ChargedHold:
		HVBG B 3;
		HVBP E 2 X_BladePowSwing();
		HVBP F 2;
		HVBP G 2 X_BladePowAttack();
		HVBP HI 2;
		TNT1 A 5;
		Goto RaiseUp;
	AltHold:
		Goto SuperSlash;
	RaiseNope:
		Goto RaiseUp;
	}

	override void DoEffect()
	{
		Super.DoEffect();
		// [TODO] abstract part of this to an "IsSelected" virtual or somesuch.
		if(self.owner && self.owner.player && (self.owner.player.ReadyWeapon == self) && self.ammo2) {
			self.ammo2.amount = 100;
		}
	}

	action void X_BladePowSwing()
	{
		A_PlaySound("weapons/bladepower", CHAN_AUTO);
		A_PlaySound("weapons/bladeswing", CHAN_WEAPON);
	}

	action void X_BladePowAttack()
	{
		A_CustomPunch(10, 1, 0, "BladePuffRed", 128, 1, 200);
		A_CustomPunch(20, 0, 0, "BladePuffRed", 128);
	}
}

class EriBladeSpawner : ActorSpawner
{
	Default
	{
		ActorSpawner.SpawnClass "EriBlade";
	}
}

class EriBladeHeretic : EriBladeSpawner replaces Gauntlets {}
class EriBladeHexen1  : EriBladeSpawner replaces FWeapFist {}
class EriBladeHexen2  : EriBladeSpawner replaces CWeapMace {}
class EriBladeHexen3  : EriBladeSpawner replaces MWeapWand {}

class BladeCharge : Ammo
{
	Default
	{
		Inventory.MaxAmount 100;
		Inventory.Icon "STTPRCNT";
		+INVENTORY.IGNORESKILL;
	}
}

class BladePuff : EriPuff
{
	Default
	{
		AttackSound "weapons/bladeclunk";
		SeeSound "weapons/bladesplat";
		RenderStyle "Translucent";
		Alpha 0.75;
	}
	States
	{	
	Spawn:
	Melee:
		BSMK A 2 NoDelay X_BladeHit();
		BSMK BCDEFG 2;
		Stop;
	XDeath:
		FAXE F 3 X_BladeHit(true);
		FAXE GHIJK 3;
		Stop;
	}
	
	void X_BladeHit(bool hitMonster = false)
	{
		if(hitMonster) {
			A_GiveToTarget("BladeCharge", 10);
		}
		if(gameinfo.gameType != GAME_STRIFE) {
			A_AlertMonsters();
		}
	}
}

class BladePuffRed : BladePuff
{
	States
	{	
	Spawn:
	Melee:
		BSMR A 2 NoDelay X_BladeHit();
		BSMR BCDEFG 2;
		Stop;
	}
}

class BladeSlash : FastProjectile
{
	Default
	{
		Radius 16;
		Height 8;
		Speed 20;
		Damage 5;
		Projectile;
		Scale 0.66;
		DamageType "Ripper";
		Obituary "$OB_MPBLADE";
		MissileType "BladeTrail";
		MissileHeight 8;
		+RIPPER;
	}
	States
	{
	Spawn:
		BSLA A 15 Bright;
		Stop;
	Death:
		TNT1 A 1;
		Stop;
	}
}

class BladeTrail : EriTrail
{
	Default
	{
		Alpha 0.5;
		Scale 0.66;
		RenderStyle "Add";
	}
	States
	{
	Spawn:
		BSLA AAAAAAA 1 Bright A_FadeOut(0.1, 1);
		Stop;
	}
}
