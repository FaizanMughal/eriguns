/*
 * eriguns2: soulcaster
 * (c) xaser 2017
 * sprites (c) Amuscaria
 */

class EriCaster : HellWeapon replaces RocketLauncher
{
	const CHARGE_LAYER = 10;
	int chargeLevel;

	Default
	{
		Scale 0.8;
		Weapon.SelectionOrder 350;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 4;
		Weapon.AmmoType "SoulAmmo";
		Weapon.SisterWeapon "EriCasterPowered";
		Inventory.PickupMessage "$GOTCASTER";
		Tag "$TAG_CASTER";
		Decal "PlasmaScorchLower";
		AttackSound "weapons/casterpow";
	}
	States
	{
	Ready:
		HCAG A 1 A_WeaponReady();
		Loop;
	Deselect:
		HCAG A 0 X_CasterChargeRelease();
		HCAG A 1 A_Lower();
		Wait;
	Select:
		HCAG A 0 X_InitChargeOverlay();
		HCAG A 1 A_Raise();
		Wait;
	Fire:
		HCAF A 0 Bright X_CasterChargeStart();
	Hold:
		HCAG A 1 Bright X_CasterChargeHold();
		HCAG A 0 Bright A_Refire();
		HCAG A 0 Bright ResolveState("Release");
	Release:
		HCAF A 1 Bright X_FireCaster();
		HCAF BC 2 Bright;
		HCAF D 6;
		HCAF E 2;
		HCAG A 2;
		Goto Ready;
	ChargeIdle:
		TNT1 A 1;
		Loop;
	Charge:
		#### A 3 X_CasterChargeActive();
		#### BCABC 3 Bright;
	ChargeLoop:
		#### ABC 3 Bright;
		#### C 0 Bright X_CasterChargeBump();
		Loop;
	Flash:
		TNT1 A 2 Bright A_Light(3);
		TNT1 A 2 Bright A_Light(2);
		TNT1 A 2 Bright A_Light(1);
		Goto LightDone;
	ReserveSprites:
		HCAA A 0;
		HCAB A 0;
		HCAC A 0;
		Stop;
	Spawn:
		HECA A -1;
		Stop;
	}

	action void X_InitChargeOverlay()
	{
		A_Overlay(CHARGE_LAYER, "ChargeIdle");
	}

	action void X_CasterChargeStart()
	{
		A_PlaySound("weapons/castercharge", CHAN_AUTO);
		invoker.chargeLevel = 1; // kick it off
		A_Overlay(CHARGE_LAYER, "Charge");
	}

	action state X_CasterChargeHold()
	{
		// special check: if we have no charge level, force-set it.
		// this means we've arrived at this state because the WeaponLevel2
		// powerup ran out.
		if(invoker.chargeLevel == 0) {
			X_CasterChargeStart();
		}
		return A_JumpIfNoAmmo("Release");
	}

	action void X_CasterChargeActive()
	{
		// play sound & change sprite based on charge level
		if(invoker.chargeLevel == 1) {
			A_PlaySound("weapons/casterloop", CHAN_BODY, 1.0, 1);
			X_SetOverlaySprite(CHARGE_LAYER, "HCAA");
		} else if (invoker.chargeLevel == 2) {
			A_PlaySound("weapons/casterloop", CHAN_BODY, 0.5, 1);
			A_PlaySound("weapons/casterloop2", CHAN_VOICE, 0.5, 1);
			X_SetOverlaySprite(CHARGE_LAYER, "HCAB");
		} else {
			A_PlaySound("weapons/casterloop2", CHAN_BODY, 1.0, 1);
			A_StopSound(CHAN_VOICE);
			X_SetOverlaySprite(CHARGE_LAYER, "HCAC");
		}
	}

	action state X_CasterChargeBump()
	{
		// if we've got enough ammo to fire the next charge level (and
		// we aren't at max), bump it up one.
		if(invoker.chargeLevel < 3 && X_CheckAmmo(invoker.chargeLevel + 1)) {
			invoker.chargeLevel++;
			return ResolveState("Charge");
		}
		return null;
	}

	action void X_CasterChargeRelease()
	{
		A_StopSound(CHAN_BODY);
		A_StopSound(CHAN_VOICE);
		invoker.chargeLevel = 0;
		X_InitChargeOverlay();
		if(player) {
			player.refire = false;
		}
	}

	action void X_FireCaster()
	{
		A_GunFlash();
		A_PlaySound("weapons/casterfire", CHAN_WEAPON);
		A_RailAttack(100 * invoker.chargeLevel, 0, 0, "", "", RGF_SILENT|RGF_NOPIERCING, 0, "CasterPuff" .. invoker.chargeLevel, 0, 0, 0, 0, 8.0, 0, "CasterTrail" .. invoker.chargeLevel, -4);
		X_ConsumeAmmo(invoker.chargeLevel);
		X_CasterChargeRelease();
	}
}

class EriCasterPowered : EriCaster
{
	Default
	{
		Weapon.SisterWeapon "EriCaster";
		+WEAPON.POWERED_UP;
	}
	States
	{
	Charge:
		#### A 0 X_CasterChargeActive();
		#### A 3 Bright X_FireCasterPow(true);
		#### B 3 Bright;
		#### C 3 Bright X_FireCasterPow(false);
		#### A 3 Bright;
		#### B 3 Bright X_FireCasterPow(false);
		#### C 3 Bright;
	ChargeLoop:
		#### A 3 Bright X_FireCasterPow(true);
		#### B 3 Bright;
		#### C 3 Bright X_FireCasterPow(false);
		#### A 3 Bright;
		#### B 3 Bright X_FireCasterPow(false);
		#### C 3 Bright;
		#### C 0 Bright X_CasterChargeBump();
		Loop;
	Release:
		HCAA A 3 Bright X_CasterChargeRelease();
		Goto Ready;
	Flash:
		TNT1 A 2 Bright A_Light(2);
		TNT1 A 2 Bright A_Light(1);
		Goto LightDone;
	}

	action void X_FireCasterPow(bool useAmmo)
	{
		int damage = ceil(100.0 * invoker.chargeLevel / 3);
		A_RailAttack(damage, 0, useAmmo, "", "", RGF_NOPIERCING, 0, "CasterPPuff" .. invoker.chargeLevel, 0, 0, 0, 0, 8.0, 0, "CasterTrailShort" .. invoker.chargeLevel, -4);
		A_GunFlash();
	}
}

class EriCasterMana : EriCaster replaces MWeapLightning
{
	Default
	{
		Weapon.AmmoGive1 25;
		Weapon.AmmoGive2 25;
		Weapon.AmmoUse1 2;
		Weapon.AmmoUse2 2;
		Weapon.AmmoType1 "Mana1";
		Weapon.AmmoType2 "Mana2";
		Weapon.SisterWeapon "EriCasterManaPowered";
		+WEAPON.PRIMARY_USES_BOTH;
	}
}

class EriCasterManaPowered : EriCasterPowered
{
	Default
	{
		Weapon.AmmoUse1 2;
		Weapon.AmmoUse2 2;
		Weapon.AmmoType1 "Mana1";
		Weapon.AmmoType2 "Mana2";
		Weapon.SisterWeapon "EriCasterMana";
		+WEAPON.PRIMARY_USES_BOTH;
		+WEAPON.POWERED_UP;
	}
}

class EriCasterSpawner : ActorSpawner
{
	Default
	{
		ActorSpawner.SpawnClass "EriCaster";
	}
}

class EriCasterHeretic  : EriCasterSpawner replaces Mace        {}
class EriCasterHeretic2 : EriCasterSpawner replaces MaceSpawner {}
class EriCasterStrife   : EriCasterSpawner replaces Mauler      {}

class CasterChargeToken : EriToken
{
	Default
	{
		Inventory.MaxAmount 2;
	}
}

class CasterTrail1 : EriTrail
{ 
	Default
	{
		Alpha 0.50;
		Scale 0.25;
		RenderStyle "Add";
	}
	States
	{
	Spawn:
		SEFX EDCBAABCDEF 1 Bright;
		Stop;
	}
}

class CasterTrail2 : CasterTrail1
{
	Default
	{
		Scale 0.33;
	}
}

class CasterTrail3 : CasterTrail1
{
	Default
	{
		Scale 0.50;
	}
}

class CasterTrailShort1 : CasterTrail1
{
	States
	{
	Spawn:
		SEFX ECABDF 1 Bright;
		Stop;
	}
}

class CasterTrailShort2 : CasterTrailShort1
{
	Default
	{
		Scale 0.33;
	}
}

class CasterTrailShort3 : CasterTrailShort1
{
	Default
	{
		Scale 0.50;
	}
}

class CasterPuff1 : EriPuff
{
	Default
	{
		Obituary "$OB_MPCASTER";
		RenderStyle "Add";
		DamageType "Soul";
		Scale 0.50;
		+ALWAYSPUFF;
		+EXTREMEDEATH;
	}
	States
	{
	Spawn:
		SPUF ABCDEFG 3 Bright;
		Stop;
	}
}

class CasterPuff2 : CasterPuff1
{
	Default
	{
		Scale 0.75;
	}
}

class CasterPuff3 : CasterPuff1
{
	Default
	{
		Scale 1.00;
	}
}

class CasterPPuff1 : CasterPuff1 { Default { Obituary "$OB_MPCASTERPOW"; } }
class CasterPPuff2 : CasterPuff2 { Default { Obituary "$OB_MPCASTERPOW"; } }
class CasterPPuff3 : CasterPuff3 { Default { Obituary "$OB_MPCASTERPOW"; } }

class EriSoulExplosion : Actor
{
	int soulDamage;
	int soulRadius;

	Default
	{
		Alpha 1.0;
		Scale 0.75;
		RenderStyle "Add";
		DamageType "Soul";
		-RANDOMIZE;
		+FORCERADIUSDMG;
		+FORCEXYBILLBOARD;
		+NOBLOCKMAP;
		+NOGRAVITY;
	}
	States
	{
	Spawn:
		TNT1 AAAAAAAA 1 NoDelay A_Warp(AAPTR_TRACER);
		SOLX A 3 Bright;
		SOLX B 3 Bright A_PlaySound("weapons/casterboom");
		SOLX C 3 Bright A_Explode(soulDamage, soulRadius, 0, 0, soulRadius);
		SOLX DEFGH 3 Bright;
		Stop;
	}

	static void X_SoulSplosion(Actor target, Actor inflictor)
	{
		if(target) {
			// spawn an explosion on the target and set its damage/radius
			// to a factor of the actor's start health & radius. Pakoosh!
			let splosion = EriSoulExplosion(Spawn("EriSoulExplosion", target.pos));
			splosion.target = inflictor;
			splosion.tracer = target;
			splosion.soulRadius = target.radius * 3;
			splosion.soulDamage = 64 + (target.startHealth / 4);
			double sScale = target.height / 56;
			splosion.scale = (sScale, sScale);

			// a e s t h e t i c   effect
			let vapor = EriSoulVapor(Spawn("EriSoulVapor", target.pos));
			vapor.tracer = target;
			vapor.scale = splosion.scale;
		}
	}
}

class EriSoulVapor : Actor
{
	Default
	{
		RenderStyle "Add";
		Alpha 1.0;
		Scale 0.75;
		-RANDOMIZE;
		+FORCEXYBILLBOARD;
		+NOBLOCKMAP;
		+NOGRAVITY;
	}
	States
	{
	Spawn:
		TNT1 AAAAAAAAAAAAAAAA 1 NoDelay A_Warp(AAPTR_TRACER, 0, 0, 24);
		SPIR E 4 Bright X_SoulRise();
		SPIR F 4 Bright A_PlaySound("weapons/castersoul");
		SPIR GHIJ 4 Bright;
		Stop;
	}

	void X_SoulRise()
	{
		self.vel.z = 4;
	}
}
