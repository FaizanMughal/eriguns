// --------------------------------------------------------------------------
//
// Base Weapon Definition
//
// --------------------------------------------------------------------------

class EriWeapon : DoomWeapon
{
	bool hold;
	int magsize;

	Property MagSize:magsize;

	Default
	{
		Scale 0.8;
	}
	States
	{
	DeadLowered:
		TNT1 A -1;
		Stop;
	DoReload:
		#### # 1 A_Print("You forgot to add a DoReload state, dummy!");
		Goto ResolveReady;
	Reload:
		#### # 1 X_Reload();
		Goto ResolveReady;
	ResolveReady:
		#### # 0 ResolveState("Ready"); 
		Stop;
	}

	override void PostBeginPlay()
	{
		self.reloadcounter = self.magsize;
	}
	
	override State GetAtkState(bool hold)
	{
		self.hold = hold;
		if(self.magsize > 0 && self.reloadcounter <= 0) {
			state reloadState = X_Reload();
			return reloadState ? reloadState : Super.GetAtkState(hold);
		} else {
			self.reloadcounter--;
		}
		return Super.GetAtkState(hold);
	}

	action state X_Reload()
	{
		int reloadAmount = min(invoker.magsize, invoker.ammo1 ? invoker.ammo1.amount : 99999);
		if(invoker.magsize > 0 && invoker.reloadcounter < reloadAmount) {
			invoker.reloadcounter = reloadAmount;
			return ResolveState("DoReload");
		}
		return null;
	}

	action state X_ReloadIfEmpty()
	{
		if(invoker.reloadcounter <= 0) {
			return X_Reload();
		}
		return null;
	}

	action void X_SetOverlayFrame(int layer, int frame)
	{
		if(self.player) {
			PSprite psp = self.player.GetPSprite(layer);
			if(psp && psp.CurState != null) {
				psp.frame = frame;
			}
		}
	}

	action state X_TradeWeapon(bool alt)
	{
		if(invoker.SisterWeaponType) {
			if((alt && CheckClass("AltPlayer")) || (!alt && !CheckClass("AltPlayer"))) {
				A_SelectWeapon(invoker.SisterWeaponType);
				return ResolveState("Deselect");
			}
		}
		return null;
	}

	// temporary pow() function since the ** operator crashes gzdoom 3.1.0
	// thanks, Gutawer!
	double pow(double base, double power)
	{
		if (power == 0) {
			return 1;
		}
		if (base == 0) {
			return 0;
		}
		return exp(power * log(base));
	}
}
